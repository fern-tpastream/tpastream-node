/**
 * This file auto-generated by Fern from our API Definition.
 */

export interface ClaimTypeName<RawValue extends ClaimTypeName.RawValue = ClaimTypeName.RawValue> {
  value: RawValue;
  visit: <Result>(visitor: ClaimTypeName._Visitor<Result>) => Result;
}

const _Medical: ClaimTypeName<"medical"> = {
  value: "medical",
  visit: (visitor) => visitor.medical(),
};
const _Dental: ClaimTypeName<"dental"> = {
  value: "dental",
  visit: (visitor) => visitor.dental(),
};
const _Rx: ClaimTypeName<"rx"> = {
  value: "rx",
  visit: (visitor) => visitor.rx(),
};
const _Vision: ClaimTypeName<"vision"> = {
  value: "vision",
  visit: (visitor) => visitor.vision(),
};
const _Facility: ClaimTypeName<"facility"> = {
  value: "facility",
  visit: (visitor) => visitor.facility(),
};
export const ClaimTypeName = {
  Medical: _Medical,
  Dental: _Dental,
  Rx: _Rx,
  Vision: _Vision,
  Facility: _Facility,
  _parse: (value: string): ClaimTypeName => {
    switch (value) {
      case "medical": {
        return _Medical;
      }
      case "dental": {
        return _Dental;
      }
      case "rx": {
        return _Rx;
      }
      case "vision": {
        return _Vision;
      }
      case "facility": {
        return _Facility;
      }
      default: {
        return {
          value: value as ClaimTypeName.RawValue,
          visit: (visitor) => visitor._other(value),
        };
      }
    }
  },
} as const;

export declare namespace ClaimTypeName {
  type RawValue = "medical" | "dental" | "rx" | "vision" | "facility";

  interface _Visitor<Result> {
    medical: () => Result;
    dental: () => Result;
    rx: () => Result;
    vision: () => Result;
    facility: () => Result;
    _other: (value: string) => Result;
  }
}
