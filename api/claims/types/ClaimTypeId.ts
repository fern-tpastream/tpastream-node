/**
 * This file auto-generated by Fern from our API Definition.
 */

export interface ClaimTypeId<RawValue extends ClaimTypeId.RawValue = ClaimTypeId.RawValue> {
  value: RawValue;
  visit: <Result>(visitor: ClaimTypeId._Visitor<Result>) => Result;
}

const _One: ClaimTypeId<"1"> = {
  value: "1",
  visit: (visitor) => visitor.one(),
};
const _Two: ClaimTypeId<"2"> = {
  value: "2",
  visit: (visitor) => visitor.two(),
};
const _Three: ClaimTypeId<"3"> = {
  value: "3",
  visit: (visitor) => visitor.three(),
};
const _Four: ClaimTypeId<"4"> = {
  value: "4",
  visit: (visitor) => visitor.four(),
};
const _Five: ClaimTypeId<"5"> = {
  value: "5",
  visit: (visitor) => visitor.five(),
};
export const ClaimTypeId = {
  One: _One,
  Two: _Two,
  Three: _Three,
  Four: _Four,
  Five: _Five,
  _parse: (value: string): ClaimTypeId => {
    switch (value) {
      case "1": {
        return _One;
      }
      case "2": {
        return _Two;
      }
      case "3": {
        return _Three;
      }
      case "4": {
        return _Four;
      }
      case "5": {
        return _Five;
      }
      default: {
        return {
          value: value as ClaimTypeId.RawValue,
          visit: (visitor) => visitor._other(value),
        };
      }
    }
  },
} as const;

export declare namespace ClaimTypeId {
  type RawValue = "1" | "2" | "3" | "4" | "5";

  interface _Visitor<Result> {
    one: () => Result;
    two: () => Result;
    three: () => Result;
    four: () => Result;
    five: () => Result;
    _other: (value: string) => Result;
  }
}
