/**
 * This file auto-generated by Fern from our API Definition.
 */

export interface ClaimStatus<RawValue extends ClaimStatus.RawValue = ClaimStatus.RawValue> {
  value: RawValue;
  visit: <Result>(visitor: ClaimStatus._Visitor<Result>) => Result;
}

const _InProcess: ClaimStatus<"In Process"> = {
  value: "In Process",
  visit: (visitor) => visitor.inProcess(),
};
const _Processed: ClaimStatus<"Processed"> = {
  value: "Processed",
  visit: (visitor) => visitor.processed(),
};
const _Rejected: ClaimStatus<"Rejected"> = {
  value: "Rejected",
  visit: (visitor) => visitor.rejected(),
};
const _Adjusted: ClaimStatus<"Adjusted"> = {
  value: "Adjusted",
  visit: (visitor) => visitor.adjusted(),
};
const _PartiallyApproved: ClaimStatus<"Partially Approved"> = {
  value: "Partially Approved",
  visit: (visitor) => visitor.partiallyApproved(),
};
export const ClaimStatus = {
  InProcess: _InProcess,
  Processed: _Processed,
  Rejected: _Rejected,
  Adjusted: _Adjusted,
  PartiallyApproved: _PartiallyApproved,
  _parse: (value: string): ClaimStatus => {
    switch (value) {
      case "In Process": {
        return _InProcess;
      }
      case "Processed": {
        return _Processed;
      }
      case "Rejected": {
        return _Rejected;
      }
      case "Adjusted": {
        return _Adjusted;
      }
      case "Partially Approved": {
        return _PartiallyApproved;
      }
      default: {
        return {
          value: value as ClaimStatus.RawValue,
          visit: (visitor) => visitor._other(value),
        };
      }
    }
  },
} as const;

export declare namespace ClaimStatus {
  type RawValue = "In Process" | "Processed" | "Rejected" | "Adjusted" | "Partially Approved";

  interface _Visitor<Result> {
    inProcess: () => Result;
    processed: () => Result;
    rejected: () => Result;
    adjusted: () => Result;
    partiallyApproved: () => Result;
    _other: (value: string) => Result;
  }
}
