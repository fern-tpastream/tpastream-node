/**
 * This file auto-generated by Fern from our API Definition.
 */

import { TpaStreamApi } from "../../..";
import * as core from "../../../core";
import * as serializers from "../..";

export const Member1: core.schemas.ObjectSchema<Member1.Raw, TpaStreamApi.employer.Member1> = core.schemas.object({
  accounts: core.schemas.list(core.schemas.lazyObject(() => serializers.employer.Account)).optional(),
  address: core.schemas.string().optional(),
  alegeusKey: core.schemas.property("alegeus_key", core.schemas.string().optional()),
  archived: core.schemas.boolean().optional(),
  archivedDate: core.schemas.property("archived_date", core.schemas.date().optional()),
  archivedby: core.schemas.lazyObject(() => serializers.employer.ArchivedBy).optional(),
  canMakeClaimRequests: core.schemas.property("can_make_claim_requests", core.schemas.boolean().optional()),
  canUsePortal: core.schemas.property("can_use_portal", core.schemas.boolean().optional()),
  createddate: core.schemas.date().optional(),
  dateOfBirth: core.schemas.property("date_of_birth", core.schemas.string().optional()),
  dependents: core.schemas.list(core.schemas.lazyObject(() => serializers.employer.Dependent)).optional(),
  email: core.schemas.string().optional(),
  employer: core.schemas.lazyObject(() => serializers.employer.Employer).optional(),
  firstName: core.schemas.property("first_name", core.schemas.string().optional()),
  firstNameDerived: core.schemas.property("first_name_derived", core.schemas.string().optional()),
  fullNameDerived: core.schemas.property("full_name_derived", core.schemas.string().optional()),
  gender: core.schemas.string().optional(),
  hireTermDaterange: core.schemas.property(
    "hire_term_daterange",
    core.schemas.lazyObject(() => serializers.employer.HireTermDaterange).optional()
  ),
  id: core.schemas.number().optional(),
  lastName: core.schemas.property("last_name", core.schemas.string().optional()),
  lastNameDerived: core.schemas.property("last_name_derived", core.schemas.string().optional()),
  modifieddate: core.schemas.date().optional(),
  phoneHome: core.schemas.property("phone_home", core.schemas.string().optional()),
  phoneMobile: core.schemas.property("phone_mobile", core.schemas.string().optional()),
  ssn: core.schemas.string().optional(),
  tenant: core.schemas.lazyObject(() => serializers.employer.Tenant).optional(),
  unreadCount: core.schemas.property("unread_count", core.schemas.number().optional()),
  vendorMembers: core.schemas.property(
    "vendor_members",
    core.schemas.list(core.schemas.lazyObject(() => serializers.employer.VendorMember))
  ),
});

export declare namespace Member1 {
  interface Raw {
    accounts?: serializers.employer.Account.Raw[] | null;
    address?: string | null;
    alegeus_key?: string | null;
    archived?: boolean | null;
    archived_date?: string | null;
    archivedby?: serializers.employer.ArchivedBy.Raw | null;
    can_make_claim_requests?: boolean | null;
    can_use_portal?: boolean | null;
    createddate?: string | null;
    date_of_birth?: string | null;
    dependents?: serializers.employer.Dependent.Raw[] | null;
    email?: string | null;
    employer?: serializers.employer.Employer.Raw | null;
    first_name?: string | null;
    first_name_derived?: string | null;
    full_name_derived?: string | null;
    gender?: string | null;
    hire_term_daterange?: serializers.employer.HireTermDaterange.Raw | null;
    id?: number | null;
    last_name?: string | null;
    last_name_derived?: string | null;
    modifieddate?: string | null;
    phone_home?: string | null;
    phone_mobile?: string | null;
    ssn?: string | null;
    tenant?: serializers.employer.Tenant.Raw | null;
    unread_count?: number | null;
    vendor_members: serializers.employer.VendorMember.Raw[];
  }
}
