/**
 * This file auto-generated by Fern from our API Definition.
 */

export interface Network<RawValue extends Network.RawValue = Network.RawValue> {
  value: RawValue;
  visit: <Result>(visitor: Network._Visitor<Result>) => Result;
}

const _In: Network<"IN"> = {
  value: "IN",
  visit: (visitor) => visitor.in(),
};
const _Out: Network<"OUT"> = {
  value: "OUT",
  visit: (visitor) => visitor.out(),
};
const _Tier1: Network<"TIER1"> = {
  value: "TIER1",
  visit: (visitor) => visitor.tier1(),
};
const _Tier2: Network<"TIER2"> = {
  value: "TIER2",
  visit: (visitor) => visitor.tier2(),
};
export const Network = {
  In: _In,
  Out: _Out,
  Tier1: _Tier1,
  Tier2: _Tier2,
  _parse: (value: string): Network => {
    switch (value) {
      case "IN": {
        return _In;
      }
      case "OUT": {
        return _Out;
      }
      case "TIER1": {
        return _Tier1;
      }
      case "TIER2": {
        return _Tier2;
      }
      default: {
        return {
          value: value as Network.RawValue,
          visit: (visitor) => visitor._other(value),
        };
      }
    }
  },
} as const;

export declare namespace Network {
  type RawValue = "IN" | "OUT" | "TIER1" | "TIER2";

  interface _Visitor<Result> {
    in: () => Result;
    out: () => Result;
    tier1: () => Result;
    tier2: () => Result;
    _other: (value: string) => Result;
  }
}
